services:
  api:
    build: 
      context: .
      dockerfile: ServeAPI/Dockerfile
    ports:
      - "8000:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./Logs:/app/Logs
      - ./MONITORING_SERVICE:/app/MONITORING_SERVICE
      - ./mlruns:/app/mlruns
      - ./mlartifacts:/app/mlartifacts
    networks:
      - monitoring_network
      - logging_network
      - mlflow_network
    depends_on:
      mlflow:
        condition: service_healthy
      training:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: uvicorn main:app --host 0.0.0.0 --port 8000

  training:
    build:
      context: .
      dockerfile: Training.Dockerfile
    ports:
      - "8001:8001"  # Changed port for FastAPI metrics server
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./Logs:/app/Logs
      - ./MONITORING_SERVICE:/app/MONITORING_SERVICE
      - ./mlruns:/app/mlruns
      - ./mlartifacts:/app/mlartifacts
      - ./checkpoints:/app/checkpoints
      - ./train_config.yml:/app/train_config.yml
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_ENABLE_ARTIFACTS_DEBUG=true
    networks:
      - monitoring_network
      - logging_network
      - mlflow_network
    depends_on:
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/metrics || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s  # Give more time for initial startup

  logging:
    build:
      context: .
      dockerfile: Logging.Dockerfile
    volumes:
      - ./Logs:/app/Logs
      - ./LOGGING_SERVICE:/app/LOGGING_SERVICE
    networks:
      - logging_network

  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "5000:5000"
    command: >
      sh -c "
        apt-get update && apt-get install -y curl &&
        mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri file:///mlruns --default-artifact-root file:///mlartifacts
      "
    environment:
      - MLFLOW_TRACKING_URI=http://localhost:5000
    volumes:
      - ./mlruns:/mlruns
      - ./mlartifacts:/mlartifacts
      - ./checkpoints:/checkpoints
    networks:
      - mlflow_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./MONITORING_SERVICE/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./MONITORING_SERVICE/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring_network

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker metrics
    pid: "host"  # Access to host process metrics
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.cpu'
      - '--collector.diskstats'
      - '--collector.meminfo'
      - '--collector.netdev'
      - '--collector.netstat'
      - '--collector.filesystem'
    networks:
      - monitoring_network

  nvidia-dcgm-exporter:
    image: nvidia/dcgm-exporter:latest
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "9400:9400"
    networks:
      - monitoring_network

  nvidia_exporter:
    image: utkuozdemir/nvidia_gpu_exporter:1.3.1
    container_name: nvidia_smi_exporter
    restart: unless-stopped
    ports:
      - "9835:9835"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - monitoring_network

networks:
  monitoring_network:
    driver: bridge
  logging_network:
    driver: bridge
  mlflow_network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: 